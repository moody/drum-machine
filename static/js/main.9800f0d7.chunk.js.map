{"version":3,"sources":["samples/q_sample.mp3","samples/w_sample.mp3","samples/e_sample.mp3","samples/a_sample.mp3","samples/s_sample.mp3","samples/d_sample.mp3","samples/z_sample.mp3","samples/x_sample.mp3","samples/c_sample.mp3","components/DrumPad/DrumPad.js","components/DrumMachine/DrumMachine.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","DrumPad","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","playing","audioRef","React","createRef","trigger","bind","assertThisInitialized","handleKeyPress","document","addEventListener","_this2","audio","current","setState","onended","playSound","data","desc","event","key","toLowerCase","toUpperCase","classNames","push","react_default","a","createElement","id","className","join","onClick","ref","src","sample","Component","DRUM_PADS","q_sample","w_sample","e_sample","a_sample","s_sample","d_sample","z_sample","x_sample","c_sample","DrumMachine","displayText","volume","handleVolumeChange","drumPadRows","i","length","row","rowArr","j","obj","components_DrumPad_DrumPad","text","currentTime","play","target","value","type","min","max","step","onChange","getDrumPadRows","App","components_DrumMachine_DrumMachine","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","components_App_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9800f0d7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/q_sample.fd347a71.mp3\";","module.exports = __webpack_public_path__ + \"static/media/w_sample.9a6ab59f.mp3\";","module.exports = __webpack_public_path__ + \"static/media/e_sample.622b753a.mp3\";","module.exports = __webpack_public_path__ + \"static/media/a_sample.db9a0134.mp3\";","module.exports = __webpack_public_path__ + \"static/media/s_sample.bef91e8f.mp3\";","module.exports = __webpack_public_path__ + \"static/media/d_sample.af02c57b.mp3\";","module.exports = __webpack_public_path__ + \"static/media/z_sample.1e102ef0.mp3\";","module.exports = __webpack_public_path__ + \"static/media/x_sample.ad102f26.mp3\";","module.exports = __webpack_public_path__ + \"static/media/c_sample.d4116ee8.mp3\";","import React, { Component } from 'react';\r\nimport './DrumPad.css';\r\n\r\nclass DrumPad extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    this.state = {\r\n      playing: false\r\n    }\r\n\r\n    this.audioRef = React.createRef();\r\n    this.trigger = this.trigger.bind(this);\r\n    this.handleKeyPress = this.handleKeyPress.bind(this);\r\n  }\r\n\r\n  componentWillMount() {\r\n    document.addEventListener(\"keypress\", this.handleKeyPress);\r\n  }\r\n\r\n  trigger() {\r\n    let audio = this.audioRef.current;\r\n    this.setState({ playing: true });\r\n    audio.onended = () => this.setState({ playing: false });\r\n    this.props.playSound(this.props.data.desc, audio);\r\n  }\r\n\r\n  handleKeyPress(event) {\r\n    switch(event.key) {\r\n      case this.props.data.key.toLowerCase():\r\n      case this.props.data.key.toUpperCase():\r\n        this.trigger();\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n  \r\n  render() {\r\n    let classNames = [\"drum-pad\"];\r\n    if (this.state.playing) classNames.push(\"playing\");\r\n\r\n    return (\r\n      <div id={this.props.data.desc} className={classNames.join(\" \")} onClick={this.trigger}>\r\n        <audio id={this.props.data.key} className=\"clip\" ref={this.audioRef} src={this.props.data.sample} />\r\n        <p>{this.props.data.key}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DrumPad;\r\n","import React, { Component } from 'react';\r\nimport DrumPad from '../DrumPad/DrumPad';\r\nimport q_sample from '../../samples/q_sample.mp3';\r\nimport w_sample from '../../samples/w_sample.mp3';\r\nimport e_sample from '../../samples/e_sample.mp3';\r\nimport a_sample from '../../samples/a_sample.mp3';\r\nimport s_sample from '../../samples/s_sample.mp3';\r\nimport d_sample from '../../samples/d_sample.mp3';\r\nimport z_sample from '../../samples/z_sample.mp3';\r\nimport x_sample from '../../samples/x_sample.mp3';\r\nimport c_sample from '../../samples/c_sample.mp3';\r\nimport './DrumMachine.css';\r\n\r\nconst DRUM_PADS = [\r\n  [ // Row 1\r\n    { key: \"Q\", desc: \"Synth I\", sample: q_sample },\r\n    { key: \"W\", desc: \"Synth II\", sample: w_sample },\r\n    { key: \"E\", desc: \"Synth III\", sample: e_sample }\r\n  ],\r\n  [ // Row 2\r\n    { key: \"A\", desc: \"Crash\", sample: a_sample },\r\n    { key: \"S\", desc: \"Snare\", sample: s_sample },\r\n    { key: \"D\", desc: \"Hi-hat\", sample: d_sample }\r\n  ],\r\n  [ // Row 3\r\n    { key: \"Z\", desc: \"Clap\", sample: z_sample },\r\n    { key: \"X\", desc: \"Kick\", sample: x_sample },\r\n    { key: \"C\", desc: \"Click\", sample: c_sample }\r\n  ]\r\n]\r\n\r\nclass DrumMachine extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      displayText: '-----',\r\n      volume: 50\r\n    }\r\n\r\n    this.playSound = this.playSound.bind(this);\r\n    this.handleVolumeChange = this.handleVolumeChange.bind(this);\r\n  }\r\n\r\n  getDrumPadRows() {\r\n    const drumPadRows = [];\r\n    for (let i = 0; i < DRUM_PADS.length; i++) {\r\n      let row = [];\r\n      let rowArr = DRUM_PADS[i];\r\n      for (let j = 0; j < rowArr.length; j++) {\r\n        let obj = rowArr[j];\r\n        row.push(<DrumPad data={obj} playSound={this.playSound} />);\r\n      }\r\n      drumPadRows.push(<div className=\"drum-pad-row\">{row}</div>);\r\n    }\r\n    return drumPadRows;\r\n  }\r\n\r\n  playSound(text, audio) {\r\n    this.setState({ displayText: (text || 'ERROR') });\r\n    audio.volume = this.state.volume / 100;\r\n    audio.currentTime = 0;\r\n    audio.play();\r\n  }\r\n\r\n  handleVolumeChange(event) {\r\n    this.setState({ volume: event.target.value });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"drum-machine\">\r\n        <div id=\"drum-machine-controls\">\r\n          <div id=\"display\">{this.state.displayText}</div>\r\n          <input id=\"volume\" type=\"range\" min=\"0\" max=\"100\" step=\"1\" value={this.state.volume} onChange={this.handleVolumeChange}/>\r\n        </div>\r\n\r\n        <div className=\"drum-pad-container\">\r\n          {this.getDrumPadRows()}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DrumMachine;\r\n","import React, { Component } from 'react';\nimport DrumMachine from '../DrumMachine/DrumMachine';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div id=\"App\">\n        <header>\n          <h1>Drum Machine</h1>\n        </header>\n        \n        <div id=\"content\">\n          <DrumMachine />\n        </div>\n\n        <footer>\n          <p>made by <a href=\"https://github.com/moody\" target=\"_blank\" rel=\"noopener noreferrer\">justin moody</a></p>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}